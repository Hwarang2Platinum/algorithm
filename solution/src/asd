import Foundation

var nk = readLine()!.split{$0==" "}.map{Int($0)!}
let N = nk[0]
let K = nk[1]
var li = [[Int]]()
(0..<N).forEach { _ in li.append(readLine()!.split{$0==" "}.map{Int($0)!}) }

var k = readLine()!.split{$0==" "}.map{Int($0)!-1}
var m = readLine()!.split{$0==" "}.map{Int($0)!-1}

var tmp = [Int]()
var isv = Array(repeating: false, count: N)
find(0)
print(0)

func start() {
    var turn = [0, 1, 2]
    let gawi = [tmp, k, m]
    var idx = [0, 0, 0]
    var wc = [0, 0, 0]
    let turnup = {idx[turn[0]] += 1; idx[turn[1]] += 1}
    while true {
        if wc[0] == K { print(1); exit(0) }
        if wc[1] == K || wc[2] == K { break }
        if gawi[0].count == idx[0] { break }

        if (li[gawi[turn[0]][idx[turn[0]]]][gawi[turn[1]][idx[turn[1]]]] == 2 ) {
            turnup()
            turn.append(turn.remove(at: 1))
            wc[turn[0]] += 1
        } else if (li[gawi[turn[0]][idx[turn[0]]]][gawi[turn[1]][idx[turn[1]]]] == 1){
            if (turn[0] > turn[1]) {
                turnup()
                turn.append(turn.remove(at: 1))
                wc[turn[0]] += 1
            } else {
                turnup()
                turn.append(turn.removeFirst())
                wc[turn[0]] += 1
            }
        } else {
            turnup()
            turn.append(turn.removeFirst())
            wc[turn[0]] += 1
        }
    }
}

func find(_ n: Int) {
    if n == N {
        start()
        return
    }

    for i in 0..<N {
        guard !isv[i] else {continue}
        isv[i] = true
        tmp.append(i)
        find(n+1)
        tmp.removeLast()
        isv[i] = false
    }
}