package March;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class sadsad {
    public static int N;
    public static int[][] grid;
    public static boolean[][] visit;

    public static Queue<Cloud> clouds = new LinkedList<>();

    public static int[] dx = {0, -1, -1, -1, 0, 1, 1, 1};
    public static int[] dy = {-1, -1, 0, 1, 1, 1, 0, -1};

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        StringTokenizer st = new StringTokenizer(br.readLine());
        N = Integer.parseInt(st.nextToken());
        int M = Integer.parseInt(st.nextToken());

        grid = new int[N][N];
        visit = new boolean[N][N];

        for (int i = 0; i < N; i++) {
            st = new StringTokenizer(br.readLine());
            for (int j = 0; j < N; j++) {
                grid[i][j] = Integer.parseInt(st.nextToken());
            }
        }

        // 처음 구름은 (N-1, 0), (N-2, 1), (N-2, 0), (N-2, 1) 4칸에 존재
        clouds.add(new Cloud(N - 1, 0));
        clouds.add(new Cloud(N - 1, 1));
        clouds.add(new Cloud(N - 2, 0));
        clouds.add(new Cloud(N - 2, 1));

        while (M-- > 0) {
            st = new StringTokenizer(br.readLine());
            int d = Integer.parseInt(st.nextToken()) - 1;
            int s = Integer.parseInt(st.nextToken());

            stepOneTwo(d, s);

            stepThreeFour();

            stepFive();
        }

        int answer = 0;
        for (int[] i : grid) {
            for (int j : i) {
                answer += j;
            }
        }

        System.out.println(answer);
    }

    public static void stepOneTwo(int d, int s) {
        for (Cloud cloud : clouds) {
            // 구름이 di 방향으로 si칸 이동
            cloud.x = (N + cloud.x + dx[d] * (s % N)) % N;
            cloud.y = (N + cloud.y + dy[d] * (s % N)) % N;

            // 각 구름에서 비가 내려 구름이 있는 칸의 바구니에 저장된 물의 양이 1 증가
            grid[cloud.x][cloud.y]++;
        }
    }

    public static void stepThreeFour() {
        while (!clouds.isEmpty()) {
            // 구름이 모두 사라진다.
            Cloud cloud = clouds.poll();

            // 구름이 생기는 칸은 3에서 사라진 칸이 아니어야 한다.
            visit[cloud.x][cloud.y] = true;

            // 물복사버그 마법을 시전
            int cnt = 0;

            for (int k = 1; k <= 7; k += 2) { // 인접한 대각선 칸 검사
                int diagonalX = cloud.x + dx[k];
                int diagonalY = cloud.y + dy[k];

                // 경계를 넘어가는 칸은 대각선 방향으로 거리가 1인 칸이 아니다.
                if (diagonalX < 0 || diagonalY < 0 || diagonalX >= N || diagonalY >= N) continue;

                if (grid[diagonalX][diagonalY] > 0) {
                    cnt++;
                }
            }

            // 대각선 방향으로 거리가 1인 칸에 물이 있는 바구니의 수만큼 바구니의 물이 양이 증가
            grid[cloud.x][cloud.y] += cnt;
        }
    }

    public static void stepFive() {
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                // 3에서 구름이 사라진 칸이 아니며 물의 양이 2 이상인 칸
                if (!visit[i][j] && grid[i][j] >= 2) {
                    // 구름 생성
                    clouds.add(new Cloud(i, j));
                    // 물의 양이 2 감소
                    grid[i][j] -= 2;
                }
            }
        }

        // 구름 사라진 칸 초기화
        visit = new boolean[N][N];
    }

    public static class Cloud {
        int x;
        int y;

        public Cloud(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }
}	